# dhcpd.conf
#
# Sample configuration file for ISC dhcpd
#
# Attention: If /etc/ltsp/dhcpd.conf exists, that will be used as
# configuration file instead of this file.
#

# option definitions common to all supported networks...
option domain-name "lab.nkontur.com";
option domain-name-servers 1.1.1.1, 8.8.8.8;

default-lease-time 600;
max-lease-time 7200;

# The ddns-updates-style parameter controls whether or not the server will
# attempt to do a DNS update when a lease is confirmed. We default to the
# behavior of the version 2 packages ('none', since DHCP v2 didn't
# have support for DDNS.)
ddns-update-style none;

# If this DHCP server is the official DHCP server for the local
# network, the authoritative directive should be uncommented.
authoritative;

omapi-port 7911;
omapi-key omapi_key;

key omapi_key {
     algorithm hmac-md5;
     secret Ofakekeyfakekeyfakekey==;
}

failover peer "failover-partner" {
     {{ dhcp_peer_type }};
     address {{ dhcp_address }};
     port 519;
     peer address {{ dhcp_peer_address }};
     peer port 519;
     max-response-delay 60;
     max-unacked-updates 10;
     mclt 60;
     split 128;
     load balance max seconds 3;
}

#
# Use this to send dhcp log messages to a different log file (you also
# have to hack syslog.conf to complete the redirection).
#log-facility local7;

# No service will be given on this subnet, but declaring it helps the 
# DHCP server to understand the network topology.

#subnet 10.152.187.0 netmask 255.255.255.0 {
#}

# This is a very basic subnet declaration.

#subnet 10.254.239.0 netmask 255.255.255.224 {
#  range 10.254.239.10 10.254.239.20;
#  option routers rtr-239-0-1.example.org, rtr-239-0-2.example.org;
#}

# This declaration allows BOOTP clients to get dynamic addresses,
# which we don't really recommend.

#subnet 10.254.239.32 netmask 255.255.255.224 {
#  range dynamic-bootp 10.254.239.40 10.254.239.60;
#  option broadcast-address 10.254.239.31;
#  option routers rtr-239-32-1.example.org;
#}

# A slightly different configuration for an internal subnet.
#subnet 10.5.5.0 netmask 255.255.255.224 {
#  range 10.5.5.26 10.5.5.30;
#  option domain-name-servers ns1.internal.example.org;
#  option domain-name "internal.example.org";
#  option subnet-mask 255.255.255.224;
#  option routers 10.5.5.1;
#  option broadcast-address 10.5.5.31;
#  default-lease-time 600;
#  max-lease-time 7200;
#}

# Hosts which require special configuration options can be listed in
# host statements.   If no address is specified, the address will be
# allocated dynamically (if possible), but the host-specific information
# will still come from the host declaration.

#host passacaglia {
#  hardware ethernet 0:0:c0:5d:bd:95;
#  filename "vmunix.passacaglia";
#  server-name "toccata.example.com";
#}

# Fixed IP addresses can also be specified for hosts.   These addresses
# should not also be listed as being available for dynamic assignment.
# Hosts for which fixed IP addresses have been specified can boot using
# BOOTP or DHCP.   Hosts for which no fixed address is specified can only
# be booted with DHCP, unless there is an address range on the subnet
# to which a BOOTP client is connected which has the dynamic-bootp flag
# set.
#host fantasia {
#  hardware ethernet 08:00:07:26:c0:a5;
#  fixed-address fantasia.example.com;
#}

# You can declare a class of clients and then do address allocation
# based on that.   The example below shows a case where all clients
# in a certain class get addresses on the 10.17.224/24 subnet, and all
# other clients get addresses on the 10.0.29/24 subnet.

#class "foo" {
#  match if substring (option vendor-class-identifier, 0, 4) = "SUNW";
#}
#
host movie-switch {
   hardware ethernet {{ movie_switch_mac }};
   fixed-address {{ movie_switch_address }};
}

host office-switch {
   hardware ethernet {{ office_switch_mac }};
   fixed-address {{ office_switch_address }};
}

host office-ap {
   hardware ethernet {{ office_ap_mac }};
   fixed-address {{ office_ap_address }};
}

host movie-ap {
   hardware ethernet {{ movie_ap_mac }};
   fixed-address {{ movie_ap_address }};
}

host ipmi {
   hardware ethernet {{ ipmi_mac }};
   fixed-address {{ ipmi_address }};
}

host ups {
   hardware ethernet {{ ups_mac }};
   fixed-address {{ ups_address }};
}

#shared-network 224-29 {
#  subnet 10.17.224.0 netmask 255.255.255.0 {
#    option routers rtr-224.example.org;
#  }
#  subnet 10.0.29.0 netmask 255.255.255.0 {
#    option routers rtr-29.example.org;
#  }
#  pool {
#    allow members of "foo";
#    range 10.17.224.10 10.17.224.250;
#  }
#  pool {
#    deny members of "foo";
#    range 10.0.29.10 10.0.29.230;
#  }
#}
   option rfc3442-classless-static-routes code 121 = array of integer 8;
   option ms-classless-static-routes code 249 = array of integer 8;

subnet 10.4.0.0 netmask 255.255.0.0 {
   option routers 10.4.0.1;
   range 10.4.64.0 10.4.127.255;
   option domain-name-servers {{ pihole_ip }}, 1.1.1.1;
}

subnet 10.5.0.0 netmask 255.255.0.0 {
   pool {
     range 10.5.64.0 10.5.127.255;
     failover peer "failover-partner";
     option routers 10.5.0.1;
     option domain-name-servers 1.1.1.1;
   }
}

subnet 10.7.0.0 netmask 255.255.0.0 {
   option routers 10.7.0.1;
   range 10.7.64.0 10.7.127.255;
   option domain-name-servers 1.1.1.1;
}
