### Configure mounts and cryptodisks
- name: fstab
  ansible.builtin.copy:
    src: "{{ lookup('env', 'CI_PROJECT_DIR') + '/base/disk/fstab' }}"
    dest: '/etc/fstab'
    owner: root
    group: root
    mode: 0600

- name: crypttab
  ansible.builtin.copy:
    src: "{{ lookup('env', 'CI_PROJECT_DIR') + '/base/disk/crypttab' }}"
    dest: '/etc/crypttab'
    owner: root
    group: root
    mode: 0600

- name: write to LUKS password file
  ansible.builtin.copy:
    content: "{{ lookup('env', 'LUKS_PASSWORD_BASE64') | b64decode }}"
    dest: '/etc/password_file.txt'
    owner: root
    group: root
    mode: 0600

### Configure monthly zpool scrub
- name: Zpool systemd timer
  ansible.builtin.copy:
    src: "{{ lookup('env', 'CI_PROJECT_DIR') + '/base/systemd/zpool-scrub.timer' }}"
    dest: '/etc/systemd/system/zpool-scrub.timer'
    owner: root
    group: root
    mode: 0600

- name: Zpool systemd service
  ansible.builtin.copy:
    src: "{{ lookup('env', 'CI_PROJECT_DIR') + '/base/systemd/zpool-scrub.service' }}"
    dest: '/etc/systemd/system/zpool-scrub.service'
    owner: root
    group: root
    mode: 0600

- name: Make sure timer enabled
  ansible.builtin.systemd:
    name: zpool-scrub.timer
    state: started
    enabled: yes
    daemon_reload: yes

### Install docker daemon
- name: Install dependencies
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common
    state: present
    update_cache: yes

- name: Add Docker GPG apt Key
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: Add docker repository to apt
  apt_repository:
    repo: deb https://download.docker.com/linux/ubuntu bionic stable
    state: present

- name: Install docker
  apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
    state: latest
    update_cache: yes

- name: Make sure docker is started and enabled
  service:
    name: docker
    state: started
    enabled: yes

### Configure docker daemon on host
- name: Docker daemon config file
  ansible.builtin.copy:
    src: "{{ lookup('env', 'CI_PROJECT_DIR') + '/docker/daemon.json' }}"
    dest: '/etc/docker/daemon.json'
    owner: root
    group: root
    create: yes
    mode: 0600
  register: docker_conf

- name: Reload Docker to pick up changes
  ansible.builtin.systemd:
    name: docker
    state: restarted
  when: docker_conf.changed

- name: Install gitlab-runner
  apt:
    name:
      - gitlab-runner
    state: latest
    update_cache: yes

- name: Add gitlab-runner user to docker group
  user:
    name: gitlab-runner
    append: yes
    groups: docker

### Configure gitlab-runner on host
- name: Gitlab runner config file
  ansible.builtin.template:
    src: "{{ lookup('env', 'CI_PROJECT_DIR') + '/base/gitlab-runner/config.toml' }}"
    dest: '/etc/gitlab-runner/config.toml'
    owner: root
    group: root
    mode: 0600

- name: Install telegraf
  apt:
    name:
      - telegraf
    state: latest
    update_cache: yes

### Configure telegraf config file
- name: Telegraf config file
  ansible.builtin.template:
    src: "{{ lookup('env', 'CI_PROJECT_DIR') + '/base/telegraf/telegraf.conf' }}"
    dest: '/etc/telegraf/telegraf.conf'
    owner: telegraf
    group: telegraf
    mode: 0600
  register: telegraf

- name: Reload telegraf to pick up changes
  ansible.builtin.systemd:
    name: telegraf
    state: restarted
  when: telegraf.changed

- name: Sets up base cronjob for nextcloud
  ansible.builtin.cron:
    name: "Nextcloud base cronjob"
    minute: "*/5"
    job: "docker exec -t -u www-data nextcloud php -f /var/www/html/cron.php"

- name: Sets up periodic file scan cronjob for nextcloud
  ansible.builtin.cron:
    name: "Nextcloud file scan cronjob"
    minute: "0"
    hour: "2"
    weekday: "0"
    job: "docker exec -u www-data nextcloud php occ files:scan --all"

- name: Sets up perodic plex chown
  ansible.builtin.cron:
    name: "Plex dir chown"
    hour: 0
    job: "chown -R konoahko:konoahko /mpool/plex"
