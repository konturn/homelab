- debug:
    var: rendered_template
  vars:
    rendered_template: "{{ lookup('template', lookup('env', 'CI_PROJECT_DIR') + '/networking/iptables/ip_update.sh') }}"

- name: Template the iptables rules file
  ansible.builtin.template:
    src: "{{ lookup('env', 'CI_PROJECT_DIR') + '/networking/netplan/config.yaml' }}"
    dest: /etc/netplan/config.yaml
    owner: root
    group: root
    mode: '0640'
  register: netplan

- name: Run Netplan config
  ansible.builtin.command: netplan apply
  become: yes
  when: netplan.changed

- name: Template the iptables rules file
  ansible.builtin.template:
    src: "{{ lookup('env', 'CI_PROJECT_DIR') + '/networking/iptables/rules.v4' }}"
    dest: /etc/iptables/rules.v4
    owner: root
    group: root
    mode: '0640'
  register: iptables

- name: Copy the ipset rules file
  ansible.builtin.copy:
    src: "{{ lookup('env', 'CI_PROJECT_DIR') + '/networking/iptables/rules.ipset' }}"
    dest: /etc/iptables/rules.ipset
    owner: root
    group: root
    mode: '0640'
  register: ipset

- name: Copy the ipset netfilter plugin
  ansible.builtin.copy:
    src: "{{ lookup('env', 'CI_PROJECT_DIR') + '/networking/iptables/10-ipset' }}"
    dest: /usr/share/netfilter-persistent/plugins.d/10-ipset
    owner: root
    group: root
    mode: '0640'
  register: netfilter

- name: Restore netfilter rules
  ansible.builtin.command: netfilter-persistent reload
  become: yes
  when: iptables.changed or ipset.changed or netfilter.changed

- name: Setup cron script directry
  ansible.builtin.file:
    path: /root/cron
    state: directory
    mode: '0700'
  
- name: Template out cron script to populate wan ipset
  ansible.builtin.template:
    src: "{{ lookup('env', 'CI_PROJECT_DIR') + '/networking/iptables/ip_update.sh' }}"
    dest: /root/cron/ip_update.sh
    owner: root
    group: root
    mode: '0700'

- name: Sets up cronjob to populate wan ipset
  ansible.builtin.cron:
    name: "Update wan ipset"
    minute: "*/5"
    job: "{{ 'bash ' + lookup('env', 'CI_PROJECT_DIR') + '/root/cron/ip_update.sh' }}"

- name: Sync systemd-networkd drop-in files
  ansible.posix.synchronize:
    src: "{{ lookup('env', 'CI_PROJECT_DIR') + '/networking/networkd' }}"
    dest: /etc/systemd/network
  register: networkd

- name: Restart systemd-networkd when the drop-in files change
  service:
    name: systemd-networkd
    state: restarted
    enabled: yes
  when: networkd.changed

