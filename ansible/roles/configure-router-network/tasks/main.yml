- name: Populate route table list
  ansible.builtin.copy:
    src: "{{ lookup('env', 'CI_PROJECT_DIR') + '/networking/iproute2/rt_tables' }}"
    dest: /etc/iproute2/rt_tables
    owner: root
    group: root
    mode: '0640'
    
- name: Ensure wireguard installed
  apt:
    name:
      - wireguard
    state: present
    update_cache: yes

- name: Add wireguard config
  ansible.builtin.template:
    src: "{{ lookup('env', 'CI_PROJECT_DIR') + '/networking/wireguard/wg0.conf' }}"
    dest: /etc/wireguard/wg0.conf
    owner: root
    group: root
    mode: '0755'
  register: wireguard

- name: Restart wireguard if config change
  service:
    name: wg-quick@wg0
    state: restarted
    enabled: yes
  when: wireguard.changed

- name: Generate Mullvad config
  ansible.builtin.script: "{{ lookup('env', 'CI_PROJECT_DIR') + '/networking/wireguard/mullvad-wg.sh ' + lookup('env', 'MULLVAD_ACCOUNT_NUMBER') }}"
  become: yes

- name: Kick Mullvad wireguard interface
  service:
    name: "wg-quick@{{ mullvad_interface_name }}"
    state: restarted
    enabled: yes

- name: Template the netplan config file
  ansible.builtin.template:
    src: "{{ lookup('env', 'CI_PROJECT_DIR') + '/networking/netplan/config.yaml' }}"
    dest: /etc/netplan/config.yaml
    owner: root
    group: root
    mode: '0640'
  register: netplan

- name: Run Netplan config
  ansible.builtin.command: netplan apply
  become: yes
  when: netplan.changed

- name: Template the iptables rules file
  ansible.builtin.template:
    src: "{{ lookup('env', 'CI_PROJECT_DIR') + '/networking/iptables/rules.v4' }}"
    dest: /etc/iptables/rules.v4
    owner: root
    group: root
    mode: '0640'
  register: iptables

- name: Copy the ipset rules file
  ansible.builtin.copy:
    src: "{{ lookup('env', 'CI_PROJECT_DIR') + '/networking/iptables/rules.ipset' }}"
    dest: /etc/iptables/rules.ipset
    owner: root
    group: root
    mode: '0640'
  register: ipset

- name: Copy the ipset netfilter plugin
  ansible.builtin.copy:
    src: "{{ lookup('env', 'CI_PROJECT_DIR') + '/networking/iptables/10-ipset' }}"
    dest: /usr/share/netfilter-persistent/plugins.d/10-ipset
    owner: root
    group: root
    mode: '0640'
  register: netfilter

- name: Restore netfilter rules
  ansible.builtin.command: netfilter-persistent reload
  become: yes
  when: iptables.changed or ipset.changed or netfilter.changed

- name: Setup cron script directry
  ansible.builtin.file:
    path: /root/cron
    state: directory
    mode: '0700'
  
- name: Template out cron script to populate wan ipset
  ansible.builtin.template:
    src: "{{ lookup('env', 'CI_PROJECT_DIR') + '/networking/iptables/ip_update.sh' }}"
    dest: /root/cron/ip_update.sh
    owner: root
    group: root
    mode: '0700'

- name: Sets up cronjob to populate wan ipset
  ansible.builtin.cron:
    name: "Update wan ipset"
    minute: "*/5"
    job: "{{ 'bash ' + '/root/cron/ip_update.sh' }}"

- name: Template out cron script for DDNS
  ansible.builtin.template:
    src: "{{ lookup('env', 'CI_PROJECT_DIR') + '/networking/dns/ddns.py' }}"
    dest: /root/cron/ddns.py
    owner: root
    group: root
    mode: '0700'

- name: Sets up cronjob for DDNS
  ansible.builtin.cron:
    name: "Update public DNS records"
    minute: "*/5"
    job: "{{ 'bash ' + '/root/cron/ddns.py -k ' + lookup('env', 'NAMESILO_API_KEY') + ' -d nkontur.com' }}"

- name: Sync systemd-networkd drop-in files
  ansible.posix.synchronize:
    src: "{{ lookup('env', 'CI_PROJECT_DIR') + '/networking/networkd' }}"
    dest: /etc/systemd/network
  register: networkd

- name: Restart systemd-networkd when the drop-in files change
  service:
    name: systemd-networkd
    state: restarted
    enabled: yes
  when: networkd.changed

- name: Populate DHCP conf file
  ansible.builtin.template:
    src: "{{ lookup('env', 'CI_PROJECT_DIR') + '/networking/dhcp/dhcpd.conf' }}"
    dest: /etc/dhcp/dhcpd.conf
    owner: root
    group: root
    mode: '0640'
  register: dhcp

- name: Restart isc-dhcp-server when the drop-in files change
  service:
    name: isc-dhcp-server
    state: restarted
    enabled: yes
  when: dhcp.changed
