#- name: install python-setuptools
#  package:
#    name: python-setuptools
#    state: present
#  delegate_to: localhost

- name: ensure required pip-packages are installed within docker image
  pip:
    name:
      - docker
      - PyYAML
      - docker-compose
  delegate_to: localhost

- name: Log in to private docker repo
  docker_login:
    username: docker
    password: "{{ lookup('env', 'DOCKER_REGISTRY_KEY') }}"
    registry_url: "https://registry.lab.nkontur.com"

- name: Template out compose file to ansible state directory on host
  ansible.builtin.template:
    src: "{{ lookup('env', 'CI_PROJECT_DIR') + '/docker/docker-compose.yml' }}"
    dest: "{{ docker_persistent_data_path + '/ansible_state/docker-compose.yml' }}"
    owner: root
    group: root
    mode: '0700'

- name: Create and start Docker services
  community.docker.docker_compose:
    project_name: docker
    project_src: "{{ docker_persistent_data_path }}/ansible_state"
    state: present

- name: Sets up base cronjob for nextcloud
  ansible.builtin.cron:
    name: "Nextcloud base cronjob"
    minute: "*/5"
    job: "docker exec -t -u www-data nextcloud php -f /var/www/html/cron.php"

- name: Sets up periodic file scan cronjob for nextcloud
  ansible.builtin.cron:
    name: "Nextcloud file scan cronjob"
    minute: "0"
    hour: "2"
    weekday: "0"
    job: "docker exec -u www-data nextcloud php occ files:scan --all"

- name: Sets up perodic plex chown
  ansible.builtin.cron:
    name: "Plex dir chown"
    hour: 0
    job: "chown -R konoahko:konoahko /mpool/plex"

- name: Template out compose file to ansible state directory within container
  ansible.builtin.template:
    src: "{{ lookup('env', 'CI_PROJECT_DIR') + '/docker/docker-compose.yml' }}"
    dest: "{{ lookup('env', 'CI_PROJECT_DIR') }}/docker/nginx"
    owner: root
    group: root
    mode: '0755'
  changed_when: false
  delegate_to: localhost

- name: Execute Python script to generate lab_nginx custom config files
  shell:
    cmd: "/usr/bin/python3 {{ lookup('env', 'CI_PROJECT_DIR') }}/docker/nginx/generate-configs.py --workspace-path {{ lookup('env', 'CI_PROJECT_DIR') }}/docker/nginx --network internal --output-prefix internal_"
  delegate_to: localhost
  changed_when: false

- name: Execute Python script to generate nginx custom config files
  shell:
    cmd: "/usr/bin/python3 {{ lookup('env', 'CI_PROJECT_DIR') }}/docker/nginx/generate-configs.py --workspace-path {{ lookup('env', 'CI_PROJECT_DIR') }}/docker/nginx --network external --output-prefix external_"
  delegate_to: localhost
  changed_when: false

- name: Execute Python script to generate iot_nginx custom config files
  shell:
    cmd: "/usr/bin/python3 {{ lookup('env', 'CI_PROJECT_DIR') }}/docker/nginx/generate-configs.py --workspace-path {{ lookup('env', 'CI_PROJECT_DIR') }}/docker/nginx --network iot"
  delegate_to: localhost
  changed_when: false

- name: Copy docker configuration files
  ansible.builtin.copy:
    src: "{{ lookup('env', 'CI_PROJECT_DIR') }}/{{ item.src }}"
    dest: "{{ docker_persistent_data_path }}/{{ item.dest }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.owner | default('root') }}"
    mode: "{{ item.mode | default('0644') }}"
  register: docker_config
  loop: "{{ docker_config }}"

- name: Restart containers if config change
  community.docker.docker_container:
    name: "{{ item.name }}"
    restart: yes
  when: item.changed
  loop: "{{ docker_config.results }}"
