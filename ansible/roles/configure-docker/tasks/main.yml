#- name: install python-setuptools
#  package:
#    name: python-setuptools
#    state: present
#  delegate_to: localhost

### Install docker daemon
- name: Install dependencies
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common
      - python3-pip
      - git
    state: present
    update_cache: yes

- name: Add Docker GPG apt Key
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: Add docker repository to apt
  apt_repository:
    repo: deb https://download.docker.com/linux/ubuntu bionic stable
    state: present

- name: Install docker
  apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
    state: latest
    update_cache: yes

- name: Make sure docker is started and enabled
  service:
    name: docker
    state: started
    enabled: yes

### Configure docker daemon on host
- name: Docker daemon config file
  ansible.builtin.copy:
    src: "{{ lookup('env', 'CI_PROJECT_DIR') + '/docker/daemon.json' }}"
    dest: '/etc/docker/daemon.json'
    owner: root
    group: root
    mode: 0600
  register: docker_conf

- name: Reload Docker to pick up changes
  ansible.builtin.systemd:

- name: ensure required pip-packages are installed on host
  pip:
    name:
      - docker
      - PyYAML
      - docker-compose

- name: Log in to private docker repo
  docker_login:
    username: docker
    password: "{{ lookup('env', 'DOCKER_REGISTRY_KEY') }}"
    registry_url: "https://registry.lab.nkontur.com"

- name: Template out compose file to ansible state directory on host
  ansible.builtin.template:
    src: "{{ lookup('env', 'CI_PROJECT_DIR') + '/docker/' + item }}"
    dest: "{{ docker_compose_dest_path + '/' + item }}"
    owner: root
    group: root
    mode: '0700'
  loop: "{{ docker_compose_file_names }}"

- name: Create nginx config output subdir if it does not exist
  ansible.builtin.file:
    path: "{{ lookup('env', 'CI_PROJECT_DIR') + '/docker/nginx/' + inventory_hostname}}"
    state: directory
    mode: '0755'
  delegate_to: localhost

- name: Template out compose file to ansible state directory within container
  ansible.builtin.template:
    src: "{{ lookup('env', 'CI_PROJECT_DIR') + '/docker/' + item }}"
    dest: "{{ lookup('env', 'CI_PROJECT_DIR') + '/docker/nginx/' + inventory_hostname }}"
    owner: root
    group: root
    mode: '0755'
  changed_when: false
  loop: "{{ docker_compose_file_names }}"
  delegate_to: localhost


- name: Execute Python script to generate nginx custom config files
  shell:
    cmd: "/usr/bin/python3 {{ lookup('env', 'CI_PROJECT_DIR') }}/docker/nginx/generate-configs.py --workspace-path {{ lookup('env', 'CI_PROJECT_DIR') }}/docker/nginx --network {{ item.network }} --output-prefix {{ item.network }}_ --output-subdir {{ inventory_hostname }} {{ item.extra_args | default('') }}"
  delegate_to: localhost
  changed_when: false
  loop: "{{ nginx_config | default([]) }}"

- name: initialize nginx conf file dicts
  set_fact: 
    docker_config_nginx: []

- name: create nginx conf file dicts
  set_fact:
    docker_config_nginx: "{{ docker_config_nginx + [{'src': 'docker/nginx/nginx.conf',
                        'dest': item.dest + '/conf/nginx.conf',
                        'name': item.name }, 
                         {'src': 'docker/nginx/' + inventory_hostname + '/' + item.network + '_stream.conf',
                        'dest': item.dest + '/conf/conf.d/stream.conf',
                        'name': item.name },
                        {'src': 'docker/nginx/' + inventory_hostname + '/' + item.network +  '_http.conf',
                        'dest': item.dest + '/conf/conf.d/http.conf',
                        'name': item.name },
                        {'src': 'docker/nginx/ssl_config',
                        'dest': item.dest + '/conf/ssl_config',
                        'name': item.name,
                        'owner': 'systemd-resolve',
                        'group': 'systemd-journal',
                        'mode': '0700'  }] }}"
  loop: "{{ nginx_config | default([]) }}"

- name: Copy docker configuration files
  ansible.builtin.template:
    src: "{{ lookup('env', 'CI_PROJECT_DIR') }}/{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.owner | default('root') }}"
    mode: "{{ item.mode | default('0644') }}"
  register: docker_config_copy
  loop: "{{ docker_config + (docker_config_nginx | default([])) }}"

- name: Create and start Docker services
  community.docker.docker_compose:
    project_name: "{{ docker_compose_project_name | default('docker') }}"
    project_src: "{{ docker_compose_dest_path }}/"
    files: "{{ docker_compose_file_names }}"
    state: present
    
- name: Restart containers if config change
  community.docker.docker_container:
    name: "{{ item.item.name }}"
    restart: yes
  when: item.changed
  loop: "{{ docker_config_copy.results }}"
